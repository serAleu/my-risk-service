spring:
  flyway:
    baselineOnMigrate: ${BASELINE_ON_MIGRATE:true}
  #    locations: classpath:db/migration
  config:
    activate:
      on-profile: ${PROFILE:preprod}
  jpa:
    open-in-view: ${SPRING_JPA_OPEN_IN_VIEW:false}
  main:
    allow-bean-definition-overriding: ${SPRING_ALLOW_BEAN_OVERRIDING:true}

datasource:
  connectionTimeout: ${DATASOURCE_CONNECTION_TIMEOUT:60000}
  maximumPoolSize: ${DATASOURCE_POOL_SIZE:20}
  cachePrepStmts: ${DATASOURCE_CACHE_PREP_STMTS:true}
  prepStmtCacheSize: ${DATASOURCE_PREP_STMT_CACHE_SIZE:250}
  prepStmtCacheSqlLimit: ${DATASOURCE_PREP_STMT_CACHE_SQL_LIMIT:2048}
  useServerPrepStmts: ${DATASOURCE_USE_SERVER_PREP_STMTS:true}
  driverClassName: ${DATASOURCE_DRIVER_CLASS_NAME:org.postgresql.Driver}
  url: jdbc:postgresql://${DB_MY_URL:localhost}:${DB_MY_PORT:5432}/${DB_MY_DATABASE:my_risk_service_local}?socketTimeout=30
  username: ${DB_MY_LOGIN:postgres}
  password: ${DB_MY_PASSWORD:postgres}

aws:
  credentials:
    access-key: ${AWS_ACCESS_KEY:AKIAWH5BMXL7TDQER3MH}
    secret-key: ${AWS_SECRET_KEY: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}
  default-task-executor:
    core-pool-size: ${CORE_POOL_SIZE:100}
    max-pool-size: ${MAX_POOL_SIZE:100}
    queue-capacity: ${QUEUE_CAPACITY:2}
    blocking-task-timeout: ${BLOCKING_TASK_TIMEOUT:1000}
  sqs:
    max-number-of-messages: ${SQS_MAX_NUMBER_OF_MESSAGES:10}
    back-off-time: ${SQS_BACK_OFF_TIME:60000}
    blacklists:
      receiver:
        queue-name: ${BL_REQUEST_RISK_QUEUE:my-risk-bl-request-preprod}
      producer:
        queue-name: ${BL_RESPONSE_RISK_QUEUE:my-risk-bl-response-preprod}
    cooldown:
      receiver:
        queue-name: ${COOLDOWN_REQUEST_RISK_QUEUE:my-risk-cooldown-request-preprod}
      producer:
        queue-name: ${COOLDOWN_RESPONSE_RISK_QUEUE:my-risk-cooldown-response-preprod}
    dedup:
      receiver:
        queue-name: ${DEDUP_REQUEST_RISK_QUEUE:my-risk-dedup-request-preprod}
      producer:
        queue-name: ${DEDUP_RESPONSE_RISK_QUEUE:my-risk-dedup-response-preprod}
    basic:
      receiver:
        queue-name: ${BASIC_REQUEST_RISK_QUEUE:my-risk-basic-request-preprod}
      producer:
        queue-name: ${BASIC_RESPONSE_RISK_QUEUE:my-risk-basic-response-preprod}
    score:
      receiver:
        queue-name: ${SCORE_REQUEST_RISK_QUEUE:my-risk-score-request-preprod}
      producer:
        queue-name: ${SCORE_RESPONSE_RISK_QUEUE:my-risk-score-response-preprod}
    seon-fraud:
      receiver:
        queue-name: ${SEON_FRAUD_REQUEST_RISK_QUEUE:my-risk-seon-fraud-request-preprod}
      producer:
        queue-name: ${SEON_FRAUD_RESPONSE_RISK_QUEUE:my-risk-seon-fraud-response-preprod}
    bureau:
      receiver:
        queue-name: ${BUREAU_REQUEST_RISK_QUEUE:my-risk-bureau-request-preprod}
      producer:
        queue-name: ${BUREAU_RESPONSE_RISK_QUEUE:my-risk-bureau-response-preprod}
    final:
      receiver:
        queue-name: ${FINAL_REQUEST_RISK_QUEUE:my-risk-final-request-preprod}
      producer:
        queue-name: ${FINAL_RESPONSE_RISK_QUEUE:my-risk-final-response-preprod}

score:
  paths-to-properties:
    term:
      max: ${DMS_SCORE_TERM_MAX:dms.score.term.max}
      min: ${DMS_SCORE_TERM_MIN:dms.score.term.min}
    amount:
      max: ${DMS_SCORE_AMOUNT_MAX:dms.score.amount.max}
      min: ${DMS_SCORE_AMOUNT_MIN:dms.score.amount.min}
  cache:
    reload-time-minutes: 10
  ds:
    jdbcDriver: jdbc:postgresql
    url: ${DB_SCORE_URL:lotus-preprod.ctoxc08s0evf.ap-southeast-1.rds.amazonaws.com}
    port: ${DB_SCORE_PORT:5432}
    database: ${DB_SCORE_DATABASE:lotus}
    username: ${DB_SCORE_USERNAME:risk_user_ro}
    password: ${DB_SCORE_PASSWORD:ZxamISdw1401ykn3M2vm}
  bitbucket:
    url:
      base: ${BITBUCKET_URL:https://api.bitbucket.org/2.0/repositories/my/external-score-files/src/master/projects/}
      il: ${BITBUCKET_PATH_TO_IL:my_scoreservice_preprod/il/app.sql}
      rs1: ${BITBUCKET_PATH_TO_RS1:my_scoreservice_preprod/rs1/app.sql}
      rs2: ${BITBUCKET_PATH_TO_RS2:my_scoreservice_preprod/rs2/app.sql}
      rs3: ${BITBUCKET_PATH_TO_RS3:my_scoreservice_preprod/rs3/app.sql}
    token: ${BASIC_AUTH_BITBUCKET:Basic c2VyX2FsZXU6QVRCQkR2RHFrUTRYdXdGS1U0UjhyUXpYdWg4YkU2RTNFN0E2}

#seon-fraud:
##  !PROD! license-key: ${SEON_LICENSE_KEY:6fb041e6-86ac-433e-93f6-ab128c72bceb}
#  license-key: ${SEON_LICENSE_KEY:1856407c-4c65-43b7-b597-70ed5f228b0d}
#  base-url: ${SEON_BASE_URL:https://api.seon.io}
#  timeout: ${SEON_TIMEOUT:30000}
#  requests-limit: ${SEON_REQUESTS_LIMIT:30}
#  ip:
#    api-version: ${SEON_IP_API_VERSION:1.1}
#  email:
#    enable: ${SEON_EMAIL_ENABLE:true}
#    api-version: ${SEON_EMAIL_API_VERSION:2.2}
#  phone:
#    enable: ${SEON_PHONE_ENABLE:true}
#    api-version: ${SEON_PHONE_API_VERSION:1.3}
#    stop-factor:
#      enable: ${SEON_PHONE_STOP_FACTOR_ENABLE:false}
#  fingerprint:
#    enable: ${SEON_FINGERPRINT_ENABLE:true}